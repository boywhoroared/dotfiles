#!/bin/bash

# Helm: init
# Clone repo and setup hooks.

# Hooks can be copied automagically by having 
#
# [init]
#   templatedir = /path/to/template/dir/
# 
# in your .gitconfig. git-init will copy any files in the template dir to
# the $GIT_DIR (.git)

# Requires
# HELM_UI_DIR
# HELM_GIT_URL

HELM_ROOT="$(dirname $0)/helm.d"

# require the helm library
if [[ -f $HELM_ROOT/helm-lib ]]; then
  source $HELM_ROOT/helm-lib
else
  echo "Error: Missing file $HELM_ROOT/helm-lib"
  exit 1
fi

REPO=$1
BRANCH_DIR=$2
BRANCH=$(echo $BRANCH_DIR | tr "[:lower:]" "[:upper:]")

if [[ -z $REPO ]]
then
  msg_error "No repository specified."
  exit 1
fi

if [[ -n $BRANCH ]]
then
  WORK_DIR="$HELM_UI_DIR/$BRANCH_DIR"
else
  WORK_DIR="$HELM_UI_DIR/$REPO"
fi

URL="$HELM_GIT_URL/$REPO.git"

function helm_init_abort() {
  msg_warn "Aborted. Cleaning up..."
  if [ $(prompt_ask "Remove $WORK_DIR") -eq 0 ]; then
    rm -r $WORK_DIR
  fi
  exit 1
}

function _check_env() {
  if [[ -z $HELM_UI_DIR ]]
  then
    msg_error '$HELM_UI_DIR is empty. Please set the path to your UI directory.'
    msg_help 'Usually, you can set it to $SPUIDIR or /data/webdev/$USER'
    exit 1;
  fi

  if [[ -z $HELM_GIT_URL ]]
  then
    msg_error '$HELM_GIT_URL is empty. Use the UI git server.'
    exit 1;
  fi
}

function helm_git_clone() {
  if [[ $(git_repo_exists $URL) -eq 1 ]] 
  then

    # create the working directory
    if [[ ! -d $WORK_DIR ]]
    then
      msg_notice "Create work directory $WORK_DIR ..."
      mkdir $WORK_DIR
    fi

    # create the repo with master
    msg_notice "Create local repo ..."
    cd $WORK_DIR

    git init
    msg_notice "Add master at $URL ..."
    git remote add -f -m master origin $URL

    # setup ticket branch
    if [[ -n $BRANCH ]] 
    then
      if [[ $(git_branch_exists "origin $BRANCH") -eq 0 ]]
      then
        # create the remote branch, then create a local tracking branch
        msg_notice "Create $BRANCH remotely..."
        git push origin origin:refs/heads/$BRANCH
      fi

      # checkout existing branch
      msg_info "Add remote for: origin $BRANCH ..."
      git remote set-branches --add origin $BRANCH 
      msg_info "Fetch: origin $BRANCH ..."
      git fetch origin $BRANCH
      # msg_info "Create local tracking $BRANCH ..."
      # git branch -t "origin/$BRANCH" $BRANCH
      msg_info "Checkout $BRANCH ..."
      git checkout $BRANCH
    else
      git fetch origin master
    fi

    # fetch submodules
    # git submodule update --init
  else
    msg_error "$URL does not exist or is inaccessible.";
    exit 1;
  fi

  msg "Done."
  exit 0;
}

_check_env

trap helm_init_abort 2

helm_git_clone 
